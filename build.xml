<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project basedir="." default="build" name="QualityAutomationFramework" xmlns:ivy="antlib:org.apache.ivy.ant">


	<!-- Sets the DSTAMP, TSTAMP, and TODAY properties in the current project -->
	<tstamp>
		<format property="build.timestamp" pattern="dd-MMM-yyyy HH:mm:ss" />
	</tstamp>

	<property name="bin.dir" value="${basedir}/bin/src" />
	<property name="bin.dir.test" value="${basedir}/bin/test" />


	<property name="src.dir" value="${basedir}/src" />
	<property name="test.dir" value="${basedir}/test" />

	<property name="meta.dir" value="${basedir}/META-INF" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />
	<property file="build.properties" />

	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="test.classpath">
		<path refid="build.classpath" />
		<pathelement location="${bin.dir}" />
	</path>

	<!-- IVY -->
	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any 
			special installation -->
		<echo message="installing ivy..." />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>
	<!-- ================================= target: install-ivy this target is 
		not necessary if you put ivy.jar in your ant lib directory if you already 
		have ivy in your ant lib, you can simply remove this target and the dependency 
		the 'go' target has on it ================================= -->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<!-- try to load ivy here from local ivy dir, in case the user has not 
			already dropped it into ant's lib dir (note that the latter copy will always 
			take precedence). We will not fail as long as local lib dir exists (it may 
			be empty) and ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />

	</target>

	<!-- ================================= target: resolve ================================= -->
	<target name="resolve" description="--> retrieve dependencies with ivy" depends="install-ivy">


		<ivy:resolve file="ivy.xml" />
		<ivy:cachepath pathid="lib.path.id" />

		<ivy:addpath topath="build.classpath">
			<path refid="lib.path.id" />
		</ivy:addpath>
	</target>

	<target name="init" depends="resolve">
		<mkdir dir="${bin.dir}" />
		<mkdir dir="${dist.dir}" />
		<copy includeemptydirs="false" todir="${bin.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.ucls" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<target name="clean">
		<delete dir="${bin.dir}" failonerror="false" />
		<delete dir="${bin.dir.test}" failonerror="false" />
		<delete dir="${dist.dir}" failonerror="false" />
	</target>



	<target depends="init, clean" name="compile">
		<mkdir dir="${bin.dir}" />
		<echo level="info">--- compile (start) ---</echo>
		<javac debug="false" destdir="${bin.dir}" source="${source}" target="${target}">
			<src path="${src.dir}" />
			<classpath refid="build.classpath" />
		</javac>
		<echo level="info">--- compile (finished) ---</echo>
	</target>

	<target depends="compile" name="test-compile">
		<mkdir dir="${bin.dir.test}" />
		<echo level="info">--- test compile (start) ---</echo>
		<javac debug="false" destdir="${bin.dir.test}" source="${source}" target="${target}">
			<src path="${test.dir}" />
			<classpath refid="test.classpath" />
		</javac>
		<echo level="info">---test compile (finished) ---</echo>
	</target>
	<target name="test" depends="test-compile">
		<taskdef resource="testngtasks" classpathref="test.classpath" />
		<testng classpathref="test.classpath" workingDir="${test.dir}" outputDir="${bin.dir.test}/test-results" haltOnFailure="true" verbose="2">
			<classpath location="${bin.dir}" />
			<classpath location="${bin.dir.test}" />
			<classfileset dir="${bin.dir.test}" includes="**/*.class" />


			<sysproperty key="log4j.configuration" value="file:///${test.dir}/log4j.properties" />
			<sysproperty key="outputDir" value="test-results" />
		</testng>
	</target>
	<!-- ================================= target: build ================================= -->
	<target name="build" depends="test, make-jar, gendoc, gensource" description="build framework, generate docs">


	</target>
	<target name="make-jar" depends="clean, compile" description="build basic version">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${ivy.module}.jar" basedir="${bin.dir}">
			<metainf dir="." includes="LICENSE.txt" />
			<metainf dir="." includes="${dist.dir}/pom.xml,${dist.dir}/pom.properties" />

			<manifest>
				<attribute name="Vendor" value="Infostretch Corp." />
				<attribute name="Built-By" value="${user.name}" />
			    <attribute name="Main-Class" value="com.qmetry.qaf.automation.openapi.v3.CodeGeneratorCLI" />

				<section name="Build-Info">
					<attribute name="qaf-Build-Time" value="${build.timestamp}" />
					<!-- Information about the program itself -->
					<attribute name="qaf-Version" value="${version-num}" />
					<attribute name="qaf-Revision" value="${build-num}" />
					<attribute name="qaf-Type" value="support" />
				</section>
			</manifest>
		</jar>
	</target>

	<target name="gendoc" depends="init" description="generate documentation">
		<delete dir="${dist.dir}/docs" />

		<mkdir dir="${dist.dir}/docs" />
		<javadoc sourcepath="${src.dir}" destdir="${dist.dir}/docs" />
		<jar compress="true" destfile="${dist.dir}/${ivy.module}-javadoc.jar" basedir="${dist.dir}/docs" />
		<delete dir="${dist.dir}/docs">
		</delete>
	</target>
	<target name="gensource" description="Generate Source" depends="init">
		<jar destfile="${dist.dir}/${ivy.module}-sources.jar" basedir="${src.dir}">
			<metainf dir="." includes="LICENSE" />
			<manifest>
				<attribute name="Vendor" value="Infostretch Corp." />
				<attribute name="Built-By" value="${user.name}" />

				<section name="Build-Info">
					<attribute name="qaf-Build-Time" value="${build.timestamp}" />
					<!-- Information about the program itself -->
					<attribute name="qaf-Version" value="${version-num}" />
					<attribute name="qaf-Revision" value="${build-num}" />
					<attribute name="qaf-Type" value="support" />
				</section>
			</manifest>
		</jar>
	</target>
	<target name="publish" >
		<!-- Determine build number from previously published revisions -->
		<ivy:buildnumber resolver="${publish.resolver}" organisation="${ivy.organisation}" module="${ivy.module}" revision="${release.num}" />

		<!-- Resolve ivy dependencies and create a Maven POM file -->
		<ivy:deliver deliverpattern="${dist.dir}/ivy.xml" pubrevision="${release.num}" status="${status}" />
		<ivy:makepom ivyfile="${dist.dir}/ivy.xml" pomfile="${dist.dir}/${artifact.name}.pom" templatefile="pom.tmpl">
			<mapping conf="compile" scope="compile" />
			<mapping conf="runtime" scope="runtime" />
			<mapping conf="test" scope="test" />
			<mapping conf="provided" scope="provided" />
		</ivy:makepom>

		<!-- Publish the local repo. Defaults to ~/.ivy2/local -->
		<ivy:publish resolver="${publish.resolver}" forcedeliver="true" publishivy="false" pubrevision="${release.num}" overwrite="true">
			<artifacts pattern="${dist.dir}/[artifact](-[classifier]).[ext]" />
			<artifact name="${artifact.name}" pattern="${dist.dir}/[artifact].[ext]" ext="pom" type="pom" version="${release.num}" />
			<artifact name="${artifact.name}" pattern="${dist.dir}/[artifact].[ext]" ext="jar" classifier="sources" type="sources" version="${release.num}" />
			<artifact name="${artifact.name}" pattern="${dist.dir}/[artifact].[ext]" ext="jar" classifier="javadoc" type="javadoc" version="${release.num}" />
		</ivy:publish>
	</target>

</project>